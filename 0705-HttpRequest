import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

public class HttpRequest {
    private String method;
    private String url;
    private String version;
    private Map<String, String> headers = new HashMap<>();
    private Map<String, String> parameters = new HashMap<>();

    //请求的构造逻辑，也使用工厂模式
    //此处的参数是从socket中获取到的InputStream对象
    public static HttpRequest build(InputStream inputStream) throws IOException {
        HttpRequest request = new HttpRequest();
        //此处的逻辑中，不能把bufferedread写到try中，写进去意味着bufferedreader会被关闭
        //影响clientSocket的状态
        //等到整个请求处理完了再关闭
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
        //build的过程就是解析请求的过程
        //1、解析首行
        String firstLine = bufferedReader.readLine();
        String[] firstLineTokens = firstLine.split(" ");
        request.method = firstLineTokens[0];
        request.url = firstLineTokens[1];
        request.version = firstLineTokens[2];
        //2、解析url中的参数 /index.html?a=10&b=20
        int post = request.url.indexOf("?");
        if (post != -1) {
            //看看url中是否有？，如果没有说明不带参数，也就不用解析
            String parameters = request.url.substring(post+1);//a=10&b=20
            parseKV(parameters, request.parameters);
        }
        //3、解析header
        String line = "";
        while ((line = bufferedReader.readLine()) != null && line.getBytes().length != 0){
            String[] headerTokens = line.split(": ");
            request.headers.put(headerTokens[0],headerTokens[1]);
        }
        //4、解析body
        return request;
    }

    private static void parseKV(String input, Map<String, String> output) {
        //按照&切分成若干组键值对
        String[] KVTokens = input.split("&");
        //按照切分结果再进行=切分
        for(String KV : KVTokens) {
            String[] result = KV.split("=");
            output.put(result[0],result[1]);
        }
    }

    //给这个类构造一些getter方法
    //请求的对象是从网络上解析来的，所以不需要setter

    public String getMethod() {
        return method;
    }

    public String getUrl() {
        return url;
    }

    public String getVersion() {
        return version;
    }

    public String getHeader (String key) {
        return headers.get(key);
    }

    public String getParameters (String key) {
        return parameters.get(key);
    }

    @Override
    public String toString() {
        return "HttpRequest{" +
                "method='" + method + '\'' +
                ", url='" + url + '\'' +
                ", version='" + version + '\'' +
                ", headers=" + headers +
                ", parameters=" + parameters +
                '}';
    }
}
